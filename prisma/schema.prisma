generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  displayName String
  description String?
  isActive    Boolean          @default(true)
  isDefault   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]

  @@index([name])
  @@index([isActive])
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  displayName String
  description String?
  category    String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@index([name])
  @@index([category])
  @@index([isActive])
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model User {
  id                       String              @id @default(uuid())
  email                    String              @unique
  clerkId                  String              @unique
  firstName                String?
  lastName                 String?
  avatar                   String?
  bio                      String?
  phone                    String?
  department               String?
  joinDate                 String?
  status                   String?             @default("Hoạt động")
  experienceLevel          ExperienceLevel?    @default(mid)
  roleId                   String              @default("ba1383db-8bbc-4bc8-952f-cb2b6ce8d363")
  skills                   String[]
  lastLogin                DateTime?
  lastSignInAt             DateTime?
  lastActivity             DateTime?
  isOnline                 Boolean             @default(false)
  clerkSessionActive       Boolean             @default(false)
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  preferredJobRoleId       String?
  preferredLanguage        String?             @default("vi")
  interviewPreferences     Json?
  autoStartWithPreferences Boolean             @default(true)
  interviews               Interview[]
  paymentHistory           PaymentHistory[]
  questionItemsCreated     QuestionItem[]      @relation("QuestionItemsCreated")
  questionSetsCreated      QuestionSet[]       @relation("QuestionSetsCreated")
  quizAttempts             QuizAttempt[]
  preferredJobRole         JobRole?            @relation("UserPreferredJobRole", fields: [preferredJobRoleId], references: [id])
  role                     Role                @relation(fields: [roleId], references: [id])
  activityEvents           UserActivityEvent[]
  dailyStats               UserDailyStats[]
  userPackages             UserPackage[]
  skillSnapshots           UserSkillSnapshot[]
  savedQuestionItems       QuestionItem[]      @relation("SavedQuestionItems")

  @@index([roleId])
}

model Interview {
  id                  String          @id @default(uuid())
  userId              String
  jobRoleId           String
  language            String
  startTime           DateTime
  endTime             DateTime?
  duration            Int?
  conversationHistory Json
  evaluation          Json
  questionCount       Int             @default(0)
  coveredTopics       String[]
  skillAssessment     Json
  progress            Int             @default(0)
  status              InterviewStatus @default(in_progress)
  jobRole             JobRole         @relation(fields: [jobRoleId], references: [id])
  user                User            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([jobRoleId])
}

model QuestionItem {
  id            String                @id @default(uuid())
  type          QuestionItemType
  stem          String
  explanation   String?
  level         QuizLevel?
  topics        String[]
  fields        String[]
  skills        String[]
  createdById   String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  category      String?
  estimatedTime Int?
  isArchived    Boolean               @default(false)
  sourceAuthor  String?
  tags          String[]
  version       Int                   @default(1)
  difficulty    Difficulty?
  createdBy     User?                 @relation("QuestionItemsCreated", fields: [createdById], references: [id])
  options       QuestionOption[]
  setLinks      QuestionSetQuestion[]
  usersSaved    User[]                @relation("SavedQuestionItems")

  @@index([category])
}

model QuestionOption {
  id         String       @id @default(uuid())
  questionId String
  text       String
  isCorrect  Boolean      @default(false)
  order      Int          @default(0)
  metadata   Json?
  question   QuestionItem @relation(fields: [questionId], references: [id])
}

model QuestionSet {
  id          String                @id @default(uuid())
  name        String
  description String?
  companyId   String?
  level       QuizLevel?
  topics      String[]
  fields      String[]
  skills      String[]
  version     Int                   @default(1)
  status      String                @default("draft")
  createdById String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  createdBy   User?                 @relation("QuestionSetsCreated", fields: [createdById], references: [id])
  items       QuestionSetQuestion[]
  attempts    QuizAttempt[]

  @@index([status])
  @@index([level])
}

model QuestionSetQuestion {
  id             String       @id @default(uuid())
  questionSetId  String
  questionId     String
  order          Int          @default(0)
  isRequired     Boolean      @default(false)
  section        String?
  timeSuggestion Int?
  weight         Float?
  question       QuestionItem @relation(fields: [questionId], references: [id])
  questionSet    QuestionSet  @relation(fields: [questionSetId], references: [id])

  @@unique([questionSetId, questionId])
  @@index([questionSetId])
  @@index([questionId])
}

model QuizAttempt {
  id            String      @id @default(uuid())
  questionSetId String
  userId        String
  status        String      @default("in_progress")
  startedAt     DateTime    @default(now())
  completedAt   DateTime?
  timeUsed      Int?
  score         Float?
  sectionScores Json?
  itemsSnapshot Json
  responses     Json?
  questionSet   QuestionSet @relation(fields: [questionSetId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([questionSetId])
}

model JdQuestions {
  id             String          @id @default(uuid())
  userId         String
  jobTitle       String
  questionType   QuestionType
  level          ExperienceLevel
  questions      String[]
  originalJDText String?
  fileName       String?
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  jdAnswers      JdAnswers[]
}

model JdAnswers {
  id              String      @id @default(uuid())
  userId          String
  jdQuestionSetId String
  questionIndex   Int
  questionText    String
  userAnswer      String
  feedback        String?
  scores          Json?
  overallScore    Float?
  strengths       String[]
  improvements    String[]
  skillAssessment Json?
  timeSpent       Int?
  answeredAt      DateTime    @default(now())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  jdQuestionSet   JdQuestions @relation(fields: [jdQuestionSetId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jdQuestionSetId])
  @@index([answeredAt])
}

model Assessment {
  id               String           @id @default(uuid())
  userId           String
  type             AssessmentType
  jobRoleId        String?
  selectedCategory String?
  level            String
  duration         Int
  totalTime        Int
  history          Json?
  realTimeScores   Json?
  finalScores      Json?
  status           AssessmentStatus @default(in_progress)
  overallFeedback  String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?        @updatedAt
  jobRole          JobRole?         @relation(fields: [jobRoleId], references: [id])

  @@index([jobRoleId])
}

model ServicePackage {
  id                   String           @id @default(uuid())
  name                 String
  price                Int
  duration             Int
  avatarInterviewLimit Int              @default(0)
  testQuizEQLimit      Int              @default(0)
  jdUploadLimit        Int              @default(0)
  description          String?
  highlight            Boolean          @default(false)
  createdAt            DateTime         @default(now())
  isActive             Boolean          @default(true)
  updatedAt            DateTime         @updatedAt
  paymentHistory       PaymentHistory[]
  userPackages         UserPackage[]

  @@index([name])
  @@index([price])
}

model UserPackage {
  id                  String         @id @default(uuid())
  userId              String
  servicePackageId    String
  orderCode           String?        @unique
  startDate           DateTime       @default(now())
  endDate             DateTime
  avatarInterviewUsed Int            @default(0)
  testQuizEQUsed      Int            @default(0)
  jdUploadUsed        Int            @default(0)
  isActive            Boolean        @default(true)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  servicePackage      ServicePackage @relation(fields: [servicePackageId], references: [id])
  user                User           @relation(fields: [userId], references: [id])

  @@unique([userId, servicePackageId])
  @@index([userId])
  @@index([servicePackageId])
  @@index([isActive])
}

model PaymentHistory {
  id               String         @id @default(uuid())
  userId           String
  servicePackageId String
  orderCode        String         @unique
  amount           Int
  refundAmount     Int            @default(0)
  description      String
  status           PaymentStatus  @default(pending)
  paymentMethod    String?
  transactionId    String?
  checkoutUrl      String?
  qrCode           String?
  returnUrl        String?
  cancelUrl        String?
  paidAt           DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  servicePackage   ServicePackage @relation(fields: [servicePackageId], references: [id])
  user             User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([servicePackageId])
  @@index([status])
  @@index([orderCode])
}

/// New event-based tracking models (backward compatible with existing UserActivity)
model UserActivityEvent {
  id           String       @id @default(uuid())
  userId       String
  activityType ActivityType
  feature      String?
  action       String
  score        Float?
  duration     Int?
  referenceId  String?
  timestamp    DateTime     @default(now())
  metadata     Json?
  skillDeltas  Json?
  user         User         @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
  @@index([activityType, timestamp])
  @@index([referenceId])
}

model UserDailyStats {
  id                    String   @id @default(uuid())
  userId                String
  date                  DateTime
  totalActivities       Int      @default(0)
  totalDuration         Int      @default(0)
  avgScore              Float?
  activityTypeBreakdown Json?
  skillAverages         Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId, date])
}

model UserSkillSnapshot {
  id          String        @id @default(uuid())
  userId      String
  skillName   String
  score       Float
  source      ActivityType?
  referenceId String?
  createdAt   DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])

  @@index([userId, skillName, createdAt])
}

model JobCategory {
  id              String              @id @default(uuid())
  name            String              @unique
  skills          String[]
  jobRoles        JobRole[]
  specializations JobSpecialization[]
}

model JobSpecialization {
  id         String      @id @default(uuid())
  name       String      @unique
  categoryId String
  jobRoles   JobRole[]
  category   JobCategory @relation(fields: [categoryId], references: [id])
}

model JobRole {
  id               String             @id @default(uuid())
  key              String             @unique
  title            String
  level            JobLevel
  description      String?
  minExperience    Int                @default(0)
  maxExperience    Int?
  order            Int                @default(0)
  categoryId       String?
  specializationId String?
  assessments      Assessment[]
  interviews       Interview[]
  category         JobCategory?       @relation(fields: [categoryId], references: [id])
  specialization   JobSpecialization? @relation(fields: [specializationId], references: [id])
  usersPreferred   User[]             @relation("UserPreferredJobRole")

  @@index([title])
  @@index([level])
  @@index([categoryId])
  @@index([specializationId])
}

enum ExperienceLevel {
  junior
  mid
  senior
}

enum InterviewStatus {
  completed
  interrupted
  in_progress
}

enum InterviewMessageRole {
  user
  ai
  system
}

enum HiringRecommendation {
  strong_hire
  hire
  consider
  reject
}

enum QuizLevel {
  junior
  middle
  senior
}

enum QuestionType {
  technical
  behavioral
}

enum QuestionItemType {
  single_choice
  multiple_choice
  free_text
  scale
  coding
}

enum Difficulty {
  easy
  medium
  hard
}

enum GoalStatus {
  pending
  in_progress
  completed
}

enum GoalType {
  skill
  interview
  certification
}

enum SkillLevel {
  beginner
  intermediate
  advanced
  expert
}

enum ActivityType {
  interview
  quiz
  practice
  learning
  goal_completed
  goal_started
  jd
  assessment
}

enum AssessmentType {
  test
  eq
}

enum PaymentStatus {
  pending
  success
  failed
  cancelled
}

enum AssessmentStatus {
  in_progress
  completed
}

enum JobLevel {
  Intern
  Junior
  Mid
  Senior
  Lead
}
