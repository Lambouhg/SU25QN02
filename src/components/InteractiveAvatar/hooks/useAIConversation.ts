import { useState, useCallback, useRef, useEffect } from 'react';
import { ChatMessage } from '@/services/openaiService';
import { processInterviewResponse, startInterview, InterviewResponse } from '@/services/Avatar-AI';

interface InterviewState {
  coveredTopics: string[];
  skillAssessment: {
    technical: number;
    communication: number;
    problemSolving: number;
  };
  progress: number;
}

interface InterviewCompleteResult {
  progress: number;
  reason?: string;
}

interface UseAIConversationProps {
  onAnswer: (text: string) => Promise<void>;
  onError: (error: string) => void;
  onFollowUpQuestion?: (question: string) => void;
  onInterviewComplete?: (result: InterviewCompleteResult) => void;
  onEndSession?: () => void; // callback cleanup Heygen/avatar session khi auto-prompt k·∫øt th√∫c
  language: 'en-US' | 'vi-VN';
  isInterviewComplete?: boolean; // Tr·∫°ng th√°i ph·ªèng v·∫•n t·ª´ b√™n ngo√†i
}

// Constants for auto-prompt feature
const AUTO_PROMPT_DELAY = 30000; // 20 seconds
const MAX_AUTO_PROMPTS = 3; // Maximum number of auto prompts before ending interview

// Initial state for interview metrics
const initialInterviewState: InterviewState = {
  coveredTopics: [],
  skillAssessment: {
    technical: 1,
    communication: 1,
    problemSolving: 1
  },
  progress: 0
};

export const useAIConversation = ({
  onAnswer,
  onError,
  onFollowUpQuestion,
  onInterviewComplete,
  onEndSession,
  language,
  isInterviewComplete = false
}: UseAIConversationProps) => {
  const [isThinking, setIsThinking] = useState(false);
  const [conversationHistory, setConversationHistory] = useState<ChatMessage[]>([]);
  const [questionCount, setQuestionCount] = useState(0);
  const [interviewState, setInterviewState] = useState<InterviewState>(initialInterviewState);
  
  // Auto-prompt states
  const [autoPromptCount, setAutoPromptCount] = useState(0);
  const autoPromptCountRef = useRef(0);
  const autoPromptTimerRef = useRef<NodeJS.Timeout | null>(null);
  const lastActivityTime = useRef<number>(Date.now());

  // Keep autoPromptCountRef in sync with state
  useEffect(() => {
    autoPromptCountRef.current = autoPromptCount;
  }, [autoPromptCount]);

  // Clear auto-prompt timer
  const clearAutoPromptTimer = useCallback(() => {
    if (autoPromptTimerRef.current) {
      clearTimeout(autoPromptTimerRef.current);
      autoPromptTimerRef.current = null;
    }
  }, []);

  // Reset to√†n b·ªô session/ph·ªèng v·∫•n nh∆∞ khi nh·∫•n End Session ·ªü useAvatarInterviewSession
  const resetInterviewSession = useCallback(() => {
    clearAutoPromptTimer();
    setAutoPromptCount(0);
    setConversationHistory([]);
    setQuestionCount(0);
    setInterviewState(initialInterviewState);
    setIsThinking(false);
    // N·∫øu c√≥ message state ·ªü ngo√†i, callback s·∫Ω reset ti·∫øp
    // N·∫øu c·∫ßn reset th√™m state kh√°c, th√™m v√†o ƒë√¢y
  }, [clearAutoPromptTimer]);

  // Start auto-prompt timer (public, only call sau khi avatar d·ª´ng n√≥i)
  const startAutoPromptTimer = useCallback(() => {
    clearAutoPromptTimer();
    autoPromptTimerRef.current = setTimeout(async () => {
      const currentCount = autoPromptCountRef.current;
      
      // Check if interview is already complete - if so, don't send auto-prompt
      if (isInterviewComplete || interviewState.progress >= 100) {
        clearAutoPromptTimer();
        setAutoPromptCount(0);
        return;
      }
      
      // Check if maximum auto prompts reached
      if (currentCount >= MAX_AUTO_PROMPTS) {
        // Khi h·∫øt auto-prompt, cleanup session nh∆∞ n√∫t End Session, kh√¥ng l∆∞u k·∫øt qu·∫£
        resetInterviewSession();
        if (onEndSession) {
          onEndSession();
        }
        return;
      }

      // Generate AI-powered auto-prompt message
      try {
        const promptInstructions = language === 'vi-VN' 
          ? `INSTRUCTION: ·ª®ng vi√™n ch∆∞a tr·∫£ l·ªùi c√¢u h·ªèi sau ${AUTO_PROMPT_DELAY/1000} gi√¢y. ƒê√¢y l√† l·∫ßn nh·∫Øc nh·ªü th·ª© ${currentCount + 1}/${MAX_AUTO_PROMPTS}. H√£y t·∫°o ra M·ªòT l·ªùi nh·∫Øc nh·ªü ng·∫Øn g·ªçn, th√¢n thi·ªán ƒë·ªÉ khuy·∫øn kh√≠ch ·ª©ng vi√™n tr·∫£ l·ªùi. ${currentCount === 0 ? 'L·∫ßn ƒë·∫ßu ti√™n n√™n nh·∫π nh√†ng.' : currentCount === 1 ? 'L·∫ßn th·ª© hai n√™n r√µ r√†ng h∆°n.' : 'L·∫ßn cu·ªëi c√πng n√™n quy·∫øt ƒëo√°n nh∆∞ng l·ªãch s·ª±.'}`
          : `INSTRUCTION: The candidate hasn't answered after ${AUTO_PROMPT_DELAY/1000} seconds. This is prompt ${currentCount + 1}/${MAX_AUTO_PROMPTS}. Generate ONE brief, friendly reminder to encourage the candidate to respond. ${currentCount === 0 ? 'First time should be gentle.' : currentCount === 1 ? 'Second time should be clearer.' : 'Final time should be decisive but polite.'}`;

        const response = await processInterviewResponse(promptInstructions, conversationHistory, language);
        setAutoPromptCount(prev => {
          autoPromptCountRef.current = prev + 1;
          return prev + 1;
        });
        await onAnswer(response.answer);

        // If this was the last allowed prompt, end interview immediately
        if (currentCount + 1 >= MAX_AUTO_PROMPTS) {
          clearAutoPromptTimer();
          setAutoPromptCount(0);
          if (onInterviewComplete) {
            onInterviewComplete({ progress: 100 });
          }
          if (onEndSession) {
            onEndSession();
          }
        } else {
        // Kh√¥ng t·ª± ƒë·ªông start l·∫°i timer ·ªü ƒë√¢y n·ªØa, ch·ªâ start l·∫°i khi avatar d·ª´ng n√≥i (b√™n ngo√†i g·ªçi)
        }
      } catch (error) {
        console.error('Error generating AI auto-prompt:', error);
        // Fallback to default messages if AI fails
        const promptMessages = language === 'vi-VN' ? [
          'B·∫°n c√≥ c·∫ßn th√™m th·ªùi gian ƒë·ªÉ suy nghƒ© kh√¥ng? H√£y chia s·∫ª suy nghƒ© c·ªßa b·∫°n.',
          'T√¥i hi·ªÉu c√¢u h·ªèi n√†y c√≥ th·ªÉ kh√≥. B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi theo c√°ch hi·ªÉu c·ªßa m√¨nh.',
          'ƒê√¢y l√† l·∫ßn cu·ªëi t√¥i h·ªèi l·∫°i. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c ph·ªèng v·∫•n kh√¥ng?'
        ] : [
          'Do you need more time to think? Please share your thoughts.',
          'I understand this question might be challenging. You can answer based on your understanding.',
          'This is my final prompt. Would you like to continue the interview?'
        ];

        const promptMessage = promptMessages[currentCount] || promptMessages[promptMessages.length - 1];
        setAutoPromptCount(prev => {
          autoPromptCountRef.current = prev + 1;
          return prev + 1;
        });
        await onAnswer(promptMessage);

        // If this was the last allowed prompt, end interview immediately
        if (currentCount + 1 >= MAX_AUTO_PROMPTS) {
          clearAutoPromptTimer();
          setAutoPromptCount(0);
          if (onInterviewComplete) {
            onInterviewComplete({ progress: 100 });
          }
        } else {
        // Kh√¥ng t·ª± ƒë·ªông start l·∫°i timer ·ªü ƒë√¢y n·ªØa, ch·ªâ start l·∫°i khi avatar d·ª´ng n√≥i (b√™n ngo√†i g·ªçi)
        }
      }
    }, AUTO_PROMPT_DELAY);
  }, [language, onAnswer, onInterviewComplete, clearAutoPromptTimer, conversationHistory, onEndSession, resetInterviewSession, autoPromptCountRef, interviewState.progress, isInterviewComplete]);

  // Reset auto-prompt when user responds
  const resetAutoPrompt = useCallback(() => {
    console.log('Resetting auto-prompt. Current count:', autoPromptCount);
    clearAutoPromptTimer();
    setAutoPromptCount(0);
    lastActivityTime.current = Date.now();
  }, [clearAutoPromptTimer, autoPromptCount]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      clearAutoPromptTimer();
    };
  }, [clearAutoPromptTimer]);

  const updateInterviewState = useCallback((response: InterviewResponse) => {
    if (response.completionDetails) {
      setInterviewState(prev => ({
        coveredTopics: response.completionDetails?.coveredTopics || prev.coveredTopics,
        skillAssessment: response.completionDetails?.skillAssessment || prev.skillAssessment,
        progress: response.interviewProgress
      }));

      // Check if interview is complete
      if (response.isInterviewComplete && onInterviewComplete) {
        clearAutoPromptTimer(); // Clear timer when interview completes
        setAutoPromptCount(0); // Reset auto prompt count
        onInterviewComplete({ progress: response.interviewProgress });
        return; // Exit early to prevent further processing
      }
    }
  }, [onInterviewComplete, clearAutoPromptTimer]);

  const startNewInterview = useCallback(async (field: string, level: string, specialization?: string, minExperience?: number, maxExperience?: number) => {
    setIsThinking(true);
    resetAutoPrompt(); // Reset auto-prompt for new interview

    try {
      // Reset all states
      setConversationHistory([]);
      setQuestionCount(0);
      setInterviewState(initialInterviewState);
      setAutoPromptCount(0);

      // Set initial system context with detailed logging
      const systemMessage: ChatMessage = {
        role: 'system',
        content: `Position: ${field}${specialization ? ` - ${specialization}` : ''} at ${level} level\nExperience: ${minExperience !== undefined && maxExperience !== undefined ? `${minExperience}-${maxExperience} years` : 'unspecified'}\nLanguage: ${language}`
      };
      
      console.log('üéØ Starting interview with field:', field, 'specialization:', specialization, 'level:', level, 'experience:', `${minExperience}-${maxExperience} years`);
      console.log('üìù System message created:', systemMessage.content);
      
      setConversationHistory([systemMessage]);

      // Get initial question from AI
      const response = await startInterview({
        field,
        level,
        language,
        specialization,
        minExperience,
        maxExperience
      });

      if (!response || !response.answer) {
        throw new Error('Failed to get initial question');
      }

      console.log('ü§ñ AI Initial response:', response.answer);
      console.log('üìä Response details:', { currentTopic: response.currentTopic, progress: response.interviewProgress });

      // Process initial response
      updateInterviewState(response);
      await onAnswer(response.answer);
      
      // Set initial question count to 0 since this is just the greeting/introduction
      // AI will manage the actual question count based on meaningful questions asked
      setQuestionCount(0);
      
        // Kh√¥ng t·ª± ƒë·ªông start auto-prompt timer ·ªü ƒë√¢y n·ªØa, ch·ªâ start khi avatar d·ª´ng n√≥i (b√™n ngo√†i g·ªçi)

    } catch (error) {
      console.error('Error starting interview:', error);
      onError(language === 'vi-VN' 
        ? 'Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu ph·ªèng v·∫•n. Vui l√≤ng th·ª≠ l·∫°i.'
        : 'Could not start the interview. Please try again.');
    } finally {
      setIsThinking(false);
    }
  }, [language, onAnswer, onError, updateInterviewState, resetAutoPrompt]);

  
  const processMessage = useCallback(
    async (text: string, externalHistory?: ChatMessage[]): Promise<void> => {
      if (!text.trim()) return;

      // Reset auto-prompt when user responds
      resetAutoPrompt();

      // Use externalHistory if provided, otherwise use local state
      const baseHistory = externalHistory ?? conversationHistory;
      
      // Ensure system message is preserved when using external history
      let updatedHistory: ChatMessage[];
      if (externalHistory) {
        // Check if external history has system message
        const hasSystemMessage = externalHistory.some(msg => msg.role === 'system');
        console.log('üîç External history check - has system message:', hasSystemMessage);
        console.log('üìù External history length:', externalHistory.length);
        
        if (!hasSystemMessage && conversationHistory.length > 0) {
          // Add our system message from local history
          const systemMessage = conversationHistory.find(msg => msg.role === 'system');
          if (systemMessage) {
            updatedHistory = [systemMessage, ...externalHistory];
            console.log('‚úÖ Added system message to external history:', systemMessage.content);
          } else {
            updatedHistory = externalHistory;
            console.log('‚ö†Ô∏è No system message found in local history');
          }
        } else {
          updatedHistory = externalHistory;
          if (hasSystemMessage) {
            const systemMsg = externalHistory.find(msg => msg.role === 'system');
            console.log('‚úÖ Using existing system message:', systemMsg?.content);
          }
        }
      } else {
        // Add user message to local history
        const nextUserMessage: ChatMessage = {
          role: 'user',
          content: text
        };
        updatedHistory = [...baseHistory, nextUserMessage];
        console.log('üìù Using local history with user message');
      }
      
      setIsThinking(true);
      try {
        setConversationHistory(updatedHistory);

        // Process response with updated history
        const response = await processInterviewResponse(text, updatedHistory, language);

        if (!response || !response.answer) {
          throw new Error('Failed to get AI response');
        }

        // Add AI response to history
        const nextAssistantMessage: ChatMessage = {
          role: 'assistant',
          content: response.answer
        };
        setConversationHistory(prev => [...prev, nextAssistantMessage]);

        // Update interview state
        updateInterviewState(response);
        await onAnswer(response.answer);

        // Handle follow-up question if present
        if (response.followUpQuestion && onFollowUpQuestion) {
          onFollowUpQuestion(response.followUpQuestion);
        }

        // Use question count from AI response instead of manual calculation
        // AI knows exactly how many technical questions have been asked
        setQuestionCount(response.questionCount || 0);
        
        // Kh√¥ng t·ª± ƒë·ªông start auto-prompt timer ·ªü ƒë√¢y n·ªØa, ch·ªâ start khi avatar d·ª´ng n√≥i (b√™n ngo√†i g·ªçi)

      } catch (error) {
        console.error('Error processing message:', error);
        onError(
          language === 'vi-VN'
            ? 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi. Vui l√≤ng th·ª≠ l·∫°i.'
            : 'Error processing your answer. Please try again.'
        );
      } finally {
        setIsThinking(false);
      }
    },
    [
      language,
      conversationHistory,
      onAnswer,
      onError,
      onFollowUpQuestion,
      updateInterviewState,
      resetAutoPrompt
    ]
  );

  return {
    isThinking,
    processMessage,
    startNewInterview,
    questionCount,
    interviewState,
    // Auto-prompt states
    autoPromptCount,
    isAutoPromptActive: autoPromptTimerRef.current !== null,
    resetAutoPrompt,
    startAutoPromptTimer,
    clearAutoPromptTimer,
    resetInterviewSession
  };
};
